"""This module wraps all log levels in one transparent class and send logs
 for different services to logstash server"""
import json
import logging
import logstash


class Logger:

    def __init__(self, logger_name, logger_type):
        # Create a custom logger
        logger = logging.getLogger(logger_name)
        if logger_type not in ['file', 'logstash']:
            raise Exception('Logger type error!')
        elif logger_type == 'file':
            f_handler = logging.FileHandler('file.log')
            f_format = logging.Formatter('%(levelname)s:%(levelno)s -- %(message)s-- %(asctime)s--%(pathname)s')
            f_handler.setFormatter(f_format)
            logger.addHandler(f_handler)
            self.logger = logging.getLogger(logger_name)
        elif logger_type == 'logstash':
            with open('config/logging_config.json', 'r') as config_file:
                data_config = json.load(config_file)
            host = data_config.get('host')
            port = data_config.get('port')
            logging.basicConfig(level=logging.INFO, format='%(levelname)s:%(levelno)s -- %(message)s-- %(asctime)s--%(pathname)s')
            logger.addHandler(logstash.LogstashHandler(host, port, version=1))
            self.logger = logging.getLogger(logger_name)

        #  Define log levels
        self.DEBUG = 'debug'
        self.WARNING = 'warning'
        self.INFO = 'info'
        self.ERROR = 'error'
        self.CRITICAL = 'critical'
        self.EXCEPTION = 'exception'
        # self.logger = logging.getLogger(logger_name)

    def log(self, message: str, log_level: str):
        """This function is a wrapper for all log levels.

            logs can be generated by specifying message, log level and logger name(which service is logging).

                    Args:
                      message:
                        log message.
                      log_level:
                        defines different levels for logs(debug, warning, info, error, critical and exception).

                    Returns:
                      None.
                    """
        #  select specified log level.
        if log_level == self.DEBUG:
            self.debug_level_log(message)
        elif log_level == self.WARNING:
            self.warning_level_log(message)
        elif log_level == self.INFO:
            self.info_level_log(message)
        elif log_level == self.ERROR:
            self.error_level_log(message)
        elif log_level == self.CRITICAL:
            self.critical_level_log(message)
        elif log_level == self.EXCEPTION:
            self.exception_level_log(message)

    def debug_level_log(self, message: str):
        """This function is a wrapper for debug level.

                calls logger for debug level.

                        Args:
                          message:
                            debug log message.
                        Returns:
                          None.
                        """
        self.logger.setLevel(logging.DEBUG)
        self.logger.debug(message)

    def warning_level_log(self, message: str):
        """This function is a wrapper for warning level.

                    calls logger for warning level.

                            Args:
                              message:
                                warning log message.
                            Returns:
                              None.
                            """
        self.logger.setLevel(logging.WARNING)
        self.logger.warning(message)

    def info_level_log(self, message: str):
        """This function is a wrapper for info level.

                    calls logger for info level.

                            Args:
                              message:
                                info log message.
                            Returns:
                              None.
                            """
        self.logger.setLevel(logging.INFO)
        self.logger.info(message)

    def error_level_log(self, message: str):
        """This function is a wrapper for error level.

                    calls logger for error level.

                            Args:
                              message:
                                error log message.
                            Returns:
                              None.
                            """
        self.logger.setLevel(logging.ERROR)
        self.logger.error(message)

    def critical_level_log(self, message: str):
        """This function is a wrapper for critical level.

                    calls logger for critical level.

                            Args:
                              message:
                                critical log message.
                            Returns:
                              None.
                            """
        self.logger.setLevel(logging.CRITICAL)
        self.logger.critical(message)

    def exception_level_log(self, message: str):
        """This function is a wrapper for exception level.

                    calls logger for exception level.

                            Args:
                              message:
                                exception log message.
                            Returns:
                              None.
                            """
        self.logger.exception(message)
